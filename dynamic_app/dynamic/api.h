/********************************************************************************
**
** 文件名:     api.h
** 版权所有:   
** 文件描述:   
**
*********************************************************************************
**             修改历史记录
**===============================================================================
**| 日期       | 作者   |  修改记录
**===============================================================================
**|  |  | 
*********************************************************************************/
#ifndef __API_H__
#define __API_H__ 1
#include "dynamic_init.h"

// log
/*******************************************************************
** 函数名:    dynamic_print
** 函数描述:  打印信息，从串口1输出
** 输入参数:  lvl:信息等级 fmt:打印格式
** 输出参数:
** 返回:       
********************************************************************/
void dynamic_print(DYNAMIC_LOG_LVL_E lvl, char *fmt, ...);

/*******************************************************************
** 函数名:    dynamic_get_log_lvl
** 函数描述:  获取当前LOG等级
** 输入参数:  
** 输出参数:
** 返回:      当前输出等级 
********************************************************************/
DYNAMIC_LOG_LVL_E dynamic_log_get_lvl(void);

/*******************************************************************
** 函数名:    dynamic_set_log_lvl
** 函数描述:  设置当前LOG等级
** 输入参数:  
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_log_set_lvl(DYNAMIC_LOG_LVL_E lvl);
/*******************************************************************
** 函数名:     dynamic_log_hex
** 函数描述:   打印16进制数
** 参数:       
** 返回:       
********************************************************************/
void dynamic_log_hex(kal_uint8 *str,kal_uint16 len);


// sys
/*******************************************************************
** 函数名:    dynamic_reset
** 函数描述:  系统重启
** 输入参数:  
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_sys_reset(void);
    
/*******************************************************************
** 函数名:    dynamic_shutdown
** 函数描述:  系统关机
** 输入参数:  time:0正常关机  其它:关机多久后自动开机,time单位S
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_sys_shutdown(kal_uint32 time);
/*******************************************************************
** 函数名:    dynamic_sys_get_power_on_reason
** 函数描述:  系统开机类型PW_CTRL_POWER_ON_REASON
** 输入参数:  
** 输出参数:
** 返回:      
********************************************************************/
kal_uint32 dynamic_sys_get_power_on_reason(void);


/*******************************************************************
** 函数名:    dynamic_crc32
** 函数描述:  计算升级包CRC 校验值
** 输入参数:  data:数据指针
              len:数据长度
** 输出参数:
** 返回:      升级包CRC 校验值
********************************************************************/
kal_uint32 dynamic_app_crc32(const char *data, int len);
/*******************************************************************
** 函数名:     dynamic_checksum
** 函数描述:   获取累加和
** 参数:       
** 返回:       
********************************************************************/
kal_uint16 dynamic_checksum(kal_uint8 *dptr, kal_uint16 len);
/*******************************************************************
** 函数名:    dynamic_get_app_cntx
** 函数描述:  获取系统信息
** 输入参数:  
** 输出参数:
** 返回:      系统信息，包含网络状态，IMEI等
********************************************************************/
APP_CNTX_T *dynamic_app_cntx_get(void);


/*******************************************************************
** 函数名:    dynamic_sleep_enable
** 函数描述:  使能休眠后，系统在空闲的时候会自动进入低功耗
** 输入参数:  
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_sleep_enable(void);

/*******************************************************************
** 函数名:    dynamic_sleep_disable
** 函数描述:  禁止休眠
** 输入参数:  
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_sleep_disable(void);
/*******************************************************************
** 函数名:     dynamic_sim_get_valid
** 函数描述:   
** 参数:       
** 返回:       0未检测到卡  1检测到卡
********************************************************************/
kal_uint8 dynamic_sim_get_valid(void);
/*******************************************************************
** 函数名:     dynamic_find_short_pos
** 函数描述:   查找双字节的位置
** 参数:       
** 返回:       
********************************************************************/
kal_int8* dynamic_find_short_pos(kal_int8 *sptr,kal_uint16 findshort,kal_uint32 maxlen);
/*******************************************************************
** 函数名:     dynamic_capital_to_small
** 函数描述: 
** 参数:       
** 返回:       
********************************************************************/
kal_uint16 *dynamic_ucs2_wcsstr(kal_uint16 *string,kal_uint16 *str_char_set);
/*******************************************************************
** 函数名:     dynamic_ascii2bcd
** 函数描述:   ASCII转为BCD "1234"-0x12 0x34
** 参数:       
** 返回:       
********************************************************************/
int dynamic_ascii2bcd(unsigned char *dptr, unsigned char *sptr, int len);
/*******************************************************************
** 函数名:     dynamic_hex2ascii
** 函数描述: 
** 参数:       
** 返回:       
********************************************************************/
int dynamic_hex2ascii(unsigned char *dptr, unsigned char *sptr, int len);
/*******************************************************************
** 函数名:     dynamic_sys_sleep_task
** 函数描述: 
** 参数:       
** 返回:       
********************************************************************/
void dynamic_sys_sleep_task(kal_uint32 x);
S32 mmi_ucs2strlen(const CHAR *arrOut);
CHAR *mmi_ucs2cpy(CHAR *strDestination, const CHAR *strSource);
S32 mmi_ucs2cmp(const CHAR *string1, const CHAR *string2);
S32 mmi_ucs2ncmp(const CHAR *string1, const CHAR *string2, U32 size);
CHAR *mmi_ucs2ncpy(CHAR *strDestination, const CHAR *strSource, U32 size);
U16 mmi_asc_to_ucs2(CHAR *pOutBuffer, CHAR *pInBuffer);
// timer
/*******************************************************************
** 函数名:    dynamic_start_timer
** 函数描述:  新建一个定时器并启动
** 输入参数:  timerid:DYNAMIC_TIMER_ID_E定时器ID
              delay:延时时间，1ms为单位，目前只支持100ms的倍数
              funcPtr:回调函数
              user:需传递到回调的用户参数
              repeat:是否自动重装载
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_timer_start(kal_uint32 timerid,kal_uint32 delay, void* funcPtr,void *user,kal_bool repeat);

/*******************************************************************
** 函数名:    dynamic_stop_timer
** 函数描述:  停止定时器
** 输入参数:  timerid:定时器ID
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_timer_stop(kal_uint32 timerid);

/*******************************************************************
** 函数名:    dynamic_timer_is_runing
** 函数描述:  定时器是否运行中
** 输入参数:  timerid:定时器ID
** 输出参数:
** 返回:      KAL_TRUE:运行中  KAL_FALSE:没有运行
********************************************************************/
kal_bool dynamic_timer_is_runing(kal_uint32 timerid);

/*******************************************************************
** 函数名:    dynamic_get_build_date_time
** 函数描述:  获取底层可执行文件编译时间
** 输入参数:  
** 输出参数:  
** 返回:      时间字符串，如:"2017/06/19 17:39" 
********************************************************************/
char* dynamic_time_get_build_date_time(void);

/*******************************************************************
** 函数名:    dynamic_get_systime
** 函数描述:  获取系统时间
** 输入参数:  
** 输出参数:  nowTime:获取到的系统时间
** 返回:      
********************************************************************/
void dynamic_time_get_systime(applib_time_struct *nowTime);

/*******************************************************************
** 函数名:    dynamic_set_systime
** 函数描述:  设置系统时间
** 输入参数:  nowTime:要设置的系统时间
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_time_set_systime(applib_time_struct *nowTime);

/*******************************************************************
** 函数名:    dynamic_kal_create_timer
** 函数描述:  创建一个定时器
** 输入参数:  timer_name_ptr:创建的定时器名，如"test_timer"
** 输出参数:
** 返回:      创建成功的定时器ID
********************************************************************/
kal_timerid dynamic_kal_create_timer(kal_char* timer_name_ptr);

/*******************************************************************
** 函数名:    dynamic_kal_set_timer
** 函数描述:  配置已创建的定时器
** 输入参数:  timer_id:已创建的定时器ID
              handler_func_ptr:回调函数  
              handler_param_ptr:需传递到回调的用户参数  
              delay:延时时间，1tick为单位(4.615ms)
              reschedule_time:是否自动重装载
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_kal_set_timer(kal_timerid timer_id, kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr, \
                   kal_uint32 delay, kal_uint32 reschedule_time);

/*******************************************************************
** 函数名:    dynamic_kal_cancel_timer
** 函数描述:  删除一个已创建的定时器
** 输入参数:  timer_id:定时器ID
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_kal_cancel_timer(kal_timerid timer_id);

/*******************************************************************
** 函数名:    dynamic_kal_get_systicks
** 函数描述:  获取系统ticks
** 输入参数:  
** 输出参数:
** 返回:      系统ticks
********************************************************************/
kal_uint32 dynamic_kal_get_systicks(void);

/*******************************************************************
** 函数名:     dynamic_kal_milli_secs_to_ticks
** 函数描述:   ms转为tick
** 输入参数:   milli_secs:要转换的时间，ms为单位
** 输出参数:    
** 返回:       转化结果，ticks
********************************************************************/
kal_uint32 dynamic_kal_milli_secs_to_ticks(kal_uint32 milli_secs);

/*******************************************************************
** 函数名:     dynamic_kal_ticks_to_milli_secs
** 函数描述:   tick转为毫秒
** 输入参数:   ticks:要转化的时间，tick为单位
** 输出参数:      
** 返回:       转化结果，ms为单位
********************************************************************/
kal_uint32 dynamic_kal_ticks_to_milli_secs(kal_uint32 ticks);

/*******************************************************************
** 函数名:     dynamic_time_utc_to_rtc
** 函数描述:   根据时区把utc时间转为rtc时间
** 输入参数:   tz:时区
               utc:UTC时间
** 输出参数:   result:rtc时间
** 返回:       
********************************************************************/
void dynamic_time_utc_to_rtc(float tz, applib_time_struct *utc, applib_time_struct *result);

/*******************************************************************
** 函数名:     dynamic_time_rtc_to_utc_with_default_tz
** 函数描述:   根据默认时区转换为UTC时间(M2M版本不可用)
** 参数:       
** 返回:       
********************************************************************/
void dynamic_time_rtc_to_utc_with_default_tz(applib_time_struct *rtc, applib_time_struct *result);
/*******************************************************************
** 函数名:     dynamic_time_rtc_to_utc_with_default_tz
** 函数描述:   根据默认时区把UTC时间转换为RTC时间(M2M版本不可用)
** 参数:       
** 返回:       
********************************************************************/
void dynamic_time_utc_to_rtc_with_default_tz(applib_time_struct *utc, applib_time_struct *result);
/*******************************************************************
** 函数名:     dynamic_timer_time2sec
** 函数描述:   根据输入时间, 计算对应的秒
** 参数:       
** 返回:       秒数, 自1970年1月1日零时起算
********************************************************************/
kal_uint32 dynamic_timer_time2sec(applib_time_struct *datetime);

// mem
void*  dynamic_med_alloc_ext_mem (kal_uint32 size);
void dynamic_med_free_ext_mem(void *mem_ptr);
/*******************************************************************
** 函数名:    dynamic_malloc
** 函数描述:  申请动态内存
** 输入参数:  size:申请的大小
** 输出参数:
** 返回:      动态内存地址
********************************************************************/
void*  dynamic_malloc (kal_uint32 size);

/*******************************************************************
** 函数名:    dynamic_free
** 函数描述:  释放动态内存
** 输入参数:  mem_ptr:动态内存地址
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_free(void *mem_ptr);

/*******************************************************************
** 函数名:    dynamic_mem_left_size
** 函数描述:  获取动态内存剩余大小
** 输入参数:  
** 输出参数:
** 返回:      动态内存剩余大小
********************************************************************/
kal_uint32 dynamic_mem_left_size(void);

// 创建链表
DYNAMIC_QUEUE_T *dynamic_queue_create(kal_uint16 limit);
// 删除链表
void dynamic_queue_destroy(DYNAMIC_QUEUE_T *q);
// 插入到链表头
int dynamic_queue_prepend(DYNAMIC_QUEUE_T *q, void *data);
// 链表已满
int dynamic_queue_is_full(DYNAMIC_QUEUE_T *q);
// 数据入栈
int dynamic_queue_push(DYNAMIC_QUEUE_T *q, void *data);
// 数据出栈
void *dynamic_queue_pop(DYNAMIC_QUEUE_T *q);
// 返回当前第一条数据
void *dynamic_queue_peek(DYNAMIC_QUEUE_T *q);


// uart
/*******************************************************************
** 函数名:    dynamic_uart_debug_port_callback_reg
** 函数描述:  DEBUG串口数据接收回调注册
** 输入参数:  
** 输出参数:  
** 返回:      
********************************************************************/
void dynamic_uart_debug_port_callback_reg(void*fun);
/*******************************************************************
** 函数名:    dynamic_uart_req_read
** 函数描述:  读取串口接收到的数据
** 输入参数:  port:串口号
              len:要读取的长度
** 输出参数:  buf:数据存放地址
** 返回:      实际读取到的长度
********************************************************************/
kal_uint16 dynamic_uart_req_read(kal_uint16 port, char *buf, kal_uint16 len);

/*******************************************************************
** 函数名:    dynamic_uart_put_bytes
** 函数描述:  发送串口数据
** 输入参数:  port:串口号
              data:要发送的数据地址
              len:要发送的长度
** 输出参数:
** 返回:      发送成功的长度
********************************************************************/
kal_uint16 dynamic_uart_put_bytes(kal_uint16 port, char *data, kal_uint32 len);

/*******************************************************************
** 函数名:    dynamic_uart_set_baudrate
** 函数描述:  设置串口波特率
** 输入参数:  port:串口号
              baudrate:波特率 如:UART_BAUD_AUTO
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_uart_set_baudrate(kal_uint16 port, kal_uint32 baudrate);

/*******************************************************************
** 函数名:    dynamic_uart_close
** 函数描述:  关闭串口
** 输入参数:  port:串口号
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_uart_close(kal_uint16 port);

/*******************************************************************
** 函数名:    dynamic_uart_register
** 函数描述:  串口回调注册
** 输入参数:  port:串口号
              callback_uart:回调函数
** 输出参数:
** 返回:      
********************************************************************/
kal_bool dynamic_uart_register(kal_uint16 port, dynamic_uart_cb callback_uart);

/*******************************************************************
** 函数名:    dynamic_uart_open
** 函数描述:  开启串口
** 输入参数:  port:串口号
              baudrate:波特率 如:UART_BAUD_AUTO
              callback_uart:回调函数
** 输出参数:
** 返回:      0:打开失败 其它:串口handle
********************************************************************/
DCL_HANDLE dynamic_uart_open(kal_uint16 port, kal_uint32 baudrate,dynamic_uart_cb callback_uart);

/*******************************************************************
** 函数名:    dynamic_uart_configure
** 函数描述:  串口配置
** 输入参数:  port:串口号
              config:串口配置参数
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_uart_configure(kal_uint16 port, UARTDCBStruct *config);
void dynamic_uart_turn_on_power(UART_PORT port, kal_bool enable);


// soc
dynamic_apn_set_sturct * dynamic_gprs_get_apn_dns(void);
int dynamic_gprs_set_apn_dns(dynamic_apn_set_sturct *info);
/*******************************************************************
** 函数名:    dynamic_soc_send
** 函数描述:  socket数据发送
** 输入参数:  socket:socket id
              buf:要发送的数据指针
              len:要发送的数据长度
** 输出参数:
** 返回:      大于0:已发送的长度  -1:链接不存在   -2:阻塞  
********************************************************************/
kal_int32 dynamic_soc_send(kal_int8 socket, char *buf, kal_uint32 len);

/*******************************************************************
** 函数名:    dynamic_soc_close
** 函数描述:  断开socket链接
** 输入参数:  socket:socket id
** 输出参数:
** 返回:      
********************************************************************/
kal_int8 dynamic_soc_close(kal_int8 socket);

/*******************************************************************
** 函数名:    dynamic_soc_connect
** 函数描述:  建立socket链接
** 输入参数:  type:0表示TCP，1表示UDP链接
              server:域名或IP，字符串格式
              port:端口号
              soc_cb:回调函数 SOCKET_CB类型
              user_data:需传递到回调的用户参数
** 输出参数:
** 返回:      大于等于0:SOCKET ID，创建成功 小于0:创建失败
********************************************************************/
kal_int8 dynamic_soc_connect(kal_uint8 type,kal_int8 *server, kal_uint16 port,void *soc_cb,void *user_data);

/*******************************************************************
** 函数名:    dynamic_soc_find_connection
** 函数描述:  获取对应的SOCKET链接参数信息
** 输入参数:  socket:socket id
** 输出参数:
** 返回:      参数信息
********************************************************************/
DYNAMIC_SOC_CONNECTION_T *dynamic_soc_find_connection(kal_int8 socket);


// http
enum_http_result dynamic_http_get_file(char *url,char *buffer,kal_uint32 buffer_size,void *cb,void *user,kal_uint32 cur_len,kal_uint32 total);
DYNAMIC_HTTP_T * dynamic_http_get_info(void);

// fs
/*******************************************************************
** 函数名:    dynamic_fs_open
** 函数描述:  打开文件
** 输入参数:  FileName:文件名，字符串格式
              flag:操作类型，如FS_READ_WRITE
** 输出参数:  
** 返回:      大于0:文件句柄   小于等于0:错误信息
********************************************************************/
int dynamic_fs_open(char* FileName, kal_uint32 flag);

/*******************************************************************
** 函数名:    dynamic_fs_read
** 函数描述:  读取文件内容
** 输入参数:  fileHandle:文件句柄
              readBuffer:读取到的数据存放地址
              numberOfBytesToRead:要读取的长度
** 输出参数:  numberOfBytesRead:实际读取到的长度
** 返回:      0:读取成功  小于0:读取失败
********************************************************************/
int dynamic_fs_read(int fileHandle, kal_uint8 *readBuffer, kal_uint32 numberOfBytesToRead, kal_uint32 *numberOfBytesRead);

/*******************************************************************
** 函数名:    dynamic_fs_write
** 函数描述:  写数据到文件
** 输入参数:  fileHandle:文件句柄
              writeBuffer:要写的数据地址
              numberOfBytesToWrite:要写的数据长度
** 输出参数:  numberOfBytesWritten:写成功的数据长度
** 返回:      0:写成功  小于0:写失败
********************************************************************/
int dynamic_fs_write(int fileHandle, kal_uint8 *writeBuffer, kal_uint32 numberOfBytesToWrite, kal_uint32 *numberOfBytesWritten);

/*******************************************************************
** 函数名:    dynamic_fs_seek
** 函数描述:  将文件指针指向指定位置
** 输入参数:  fileHandle:文件句柄
              offset:偏移量
              whence:0文件头  1当前位置  2文件尾
** 输出参数:
** 返回:      
********************************************************************/
int dynamic_fs_seek(int fileHandle, int offset, kal_uint32 whence);

/*******************************************************************
** 函数名:    dynamic_fs_get_file_position
** 函数描述:  获取当前文件指针指向的位置
** 输入参数:  fileHandle:文件句柄
** 输出参数:
** 返回:      当前文件指针指向的位置
********************************************************************/
int dynamic_fs_get_file_position(int fileHandle);

/*******************************************************************
** 函数名:    dynamic_fs_truncate
** 函数描述:  清空文件
** 输入参数:  fileHandle:文件句柄
** 输出参数:
** 返回:      0:成功  其它:失败
********************************************************************/
int dynamic_fs_truncate(int fileHandle);

/*******************************************************************
** 函数名:    dynamic_fs_flush
** 函数描述:  将缓冲区中还没有写入到文件中的数据写入进文件中去
** 输入参数:  fileHandle:文件句柄
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_fs_flush(int fileHandle);

/*******************************************************************
** 函数名:    dynamic_fs_close
** 函数描述:  关闭一个已打开的文件
** 输入参数:  fileHandle:文件句柄
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_fs_close(int fileHandle);

/*******************************************************************
** 函数名:    dynamic_fs_get_size
** 函数描述:  获取文件大小
** 输入参数:  lpFileName:文件名，字符串格式
** 输出参数:
** 返回:      大于等于0:文件大小  小于0:错误
********************************************************************/
int dynamic_fs_get_size(char *lpFileName);

/*******************************************************************
** 函数名:    dynamic_fs_delete
** 函数描述:  删除文件
** 输入参数:  lpFileName:文件名，字符串格式
** 输出参数:
** 返回:      0:删除成功  其它:失败
********************************************************************/
int dynamic_fs_delete(char *lpFileName);

/*******************************************************************
** 函数名:    dynamic_fs_check
** 函数描述:  调整分配的集群以适应文件大小
** 输入参数:  lpFileName:文件名，字符串格式
** 输出参数:
** 返回:      0:成功  其它:失败
********************************************************************/
int dynamic_fs_check(char *lpFileName);

/*******************************************************************
** 函数名:    dynamic_fs_rename
** 函数描述:  修改文件名
** 输入参数:  lpFileName:旧文件名，字符串格式
              newLpFileName:新文件名，字符串格式
** 输出参数:
** 返回:      0:成功   其它:失败
********************************************************************/
int dynamic_fs_rename(char *lpFileName, char *newLpFileName);

/*******************************************************************
** 函数名:    dynamic_fs_create_dir
** 函数描述:  创建一个目录
** 输入参数:  lpDirName:目录名
** 输出参数:
** 返回:      0:成功   其它:失败
********************************************************************/
int dynamic_fs_create_dir(char *lpDirName);

/*******************************************************************
** 函数名:    dynamic_fs_delete_dir
** 函数描述:  删除一个目录
** 输入参数:  lpDirName:目录名
** 输出参数:
** 返回:      0:成功   其它:失败
********************************************************************/
int dynamic_fs_delete_dir(char *lpDirName);

/*******************************************************************
** 函数名:    dynamic_fs_check_dir
** 函数描述:  检查目录是否正常
** 输入参数:  lpDirName:目录名
** 输出参数:
** 返回:      0:正常  其它:异常
********************************************************************/
int dynamic_fs_check_dir(char *lpDirName);

/*******************************************************************
** 函数名:    dynamic_fs_get_free_space
** 函数描述:  获取当前剩余空间
** 输入参数:  
** 输出参数:
** 返回:      当前剩余空间
********************************************************************/
kal_int64 dynamic_fs_get_free_space (void);

/*******************************************************************
** 函数名:    dynamic_fs_get_total_space
** 函数描述:  获取空间总大小
** 输入参数:  
** 输出参数:
** 返回:      空间总大小
********************************************************************/
kal_int64  dynamic_fs_get_total_space(void);

/*******************************************************************
** 函数名:    dynamic_fs_format
** 函数描述:  格式化C盘空间，回复出厂设置
** 输入参数:  
** 输出参数:
** 返回:      0:成功   其它:失败
********************************************************************/
int dynamic_fs_format(void);


// adc
/*******************************************************************
** 函数名:    dynamic_adc_get_channel_voltage
** 函数描述:  获取指定通道电压
** 输入参数:  ch:指定通道
** 输出参数:  voltage:电压值，单位uv
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_adc_get_channel_voltage(DCL_ADC_CHANNEL_TYPE_ENUM ch, kal_uint32 *voltage);

/*******************************************************************
** 函数名:    dynamic_adc_get_data
** 函数描述:  获取电池信息
** 输入参数:  
** 输出参数:  BATPHYS:电池相关信息
** 返回:      
********************************************************************/
void dynamic_adc_get_data(BATPHYStruct *BATPHYS);

/*******************************************************************
** 函数名:    dynamic_adc_get_chr_status
** 函数描述:  充电器接入状态
** 输入参数:  
** 输出参数:
** 返回:      0:充电器接入   1:充电器拔出   2:未知
********************************************************************/
CHARGER_IN_OUT_STATUS dynamic_adc_get_chr_status(void);

/*******************************************************************
** 函数名:    dynamic_adc_is_charge_full
** 函数描述:  充电是否已完成
** 输入参数:  
** 输出参数:
** 返回:      KAL_TRUE:充电已完成  KAL_FALSE:充电未完成
********************************************************************/
kal_bool dynamic_adc_is_charge_full(void);
/*******************************************************************
** 函数名:     dynamic_adc_vbat_percentage
** 函数描述:   
** 参数:       电压值，单位uv
** 返回:       1~100
********************************************************************/
kal_uint8 dynamic_adc_vbat_percentage(kal_uint32 vbat);


// telephony
/*******************************************************************
** 函数名:    dynamic_telephony_call_status
** 函数描述:  获取当前通话状态
** 输入参数:  
** 输出参数:
** 返回:      通话状态 CALL_STATUS_E
********************************************************************/
kal_uint8 dynamic_telephony_call_status(void);

/*******************************************************************
** 函数名:    dynamic_telephony_call_cb_reg
** 函数描述:  电话状态变化回调注册
** 输入参数:  cb:电话状态变化回调函数
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_telephony_call_cb_reg(CALL_CB cb);

/*******************************************************************
** 函数名:    dynamic_telephony_sms_recv_reg
** 函数描述:  接收到新短信回调注册
** 输入参数:  cb:回调函数
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_telephony_sms_recv_reg(SMS_CB cb);

/*******************************************************************
** 函数名:    dynamic_telephony_dial
** 函数描述:  拨打电话
** 输入参数:  number:电话号码
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_telephony_dial(char *number);

/*******************************************************************
** 函数名:    dynamic_telephony_reject
** 函数描述:  挂断电话
** 输入参数:  
** 输出参数:
** 返回:      KAL_TRUE:成功
********************************************************************/
kal_bool dynamic_telephony_reject(void);

/*******************************************************************
** 函数名:    dynamic_telephony_accept
** 函数描述:  接听电话
** 输入参数:  
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_telephony_accept(void);

/*******************************************************************
** 函数名:    dynamic_telephony_sms_send
** 函数描述:  发送短信
** 输入参数:  number:电话号码
              content:短信内容，ASCII码
              callback:发送结果回调
** 输出参数:
** 返回:      KAL_TRUE:成功  KAL_FALSE:失败，长度错误
********************************************************************/
kal_bool dynamic_telephony_sms_send(char *number,char *content,SMS_SEND_CB callback);
/*******************************************************************
** 函数名:    dynamic_telephony_sms_del_all
** 函数描述:  删除全部短信
** 输入参数:  
** 输出参数:
** 返回:      KAL_TRUE:成功
********************************************************************/
kal_bool dynamic_telephony_sms_del_all(void);



// I2C
/*******************************************************************
** 函数名:    dynamic_i2c_configure
** 函数描述:  I2C配置
** 输入参数:  slave_addr:器件地址
              speed:速率
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_i2c_configure(kal_uint32 slave_addr, kal_uint32 speed);

/*******************************************************************
** 函数名:    dynamic_i2c_receive
** 函数描述:  I2C数据读取
** 输入参数:  ucDeviceAddr:器件地址
              ucBufferIndex:寄存器地址
              unDataLength:要读取的数据长度
** 输出参数:  pucData:存放读取到的数据指针
** 返回:      KAL_TRUE:成功    KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_i2c_receive(kal_uint8 ucDeviceAddr, kal_uint8 ucBufferIndex, kal_uint8* pucData, kal_uint32 unDataLength);

/*******************************************************************
** 函数名:    dynamic_i2c_send
** 函数描述:  I2C数据发送
** 输入参数:  ucDeviceAddr:器件地址
              ucBufferIndex:寄存器地址
              pucData:要发送的数据指针
              unDataLength:要发送的数据长度
** 输出参数:
** 返回:      KAL_TRUE:成功    KAL_FALSE:失败
********************************************************************/
kal_bool dynamic_i2c_send(kal_uint8 ucDeviceAddr, kal_uint8 ucBufferIndex, kal_uint8* pucData, kal_uint32 unDataLength);


// LBS
/*******************************************************************
** 函数名:    dynamic_lbs_req
** 函数描述:  请求查询多基站
** 输入参数:  NULL保留
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_lbs_req(void* str);

/*******************************************************************
** 函数名:    dynamic_lbs_get_info
** 函数描述:  获取多基站信息
** 输入参数:  
** 输出参数:
** 返回:      多基站信息lbs_struct
********************************************************************/
lbs_struct * dynamic_lbs_get_info(void);



// GPIO,EINT
/*******************************************************************
** 函数名:    GPIO_ModeSetup
** 函数描述:  gpio模式配置
** 输入参数:  pin: gpio管脚号码
              conf_dada: 设置的模式，参考datasheet
** 输出参数:
** 返回:      
********************************************************************/
void GPIO_ModeSetup(kal_uint16 pin, kal_uint16 conf_dada);

/*******************************************************************
** 函数名:    GPIO_InitIO
** 函数描述:  gpio方向配置
** 输入参数:  direction: 0 输入  1 输出
              port: gpio管脚号码
** 输出参数:  
** 返回:      
********************************************************************/
void GPIO_InitIO(char direction, kal_uint16 port);

/*******************************************************************
** 函数名:    GPIO_ReadIO
** 函数描述:  读取gpio电平值
** 输入参数:  port: gpio管脚号码
** 输出参数:
** 返回:      当前gpio电平:0表示低电平  其它:表示高电平
********************************************************************/
char GPIO_ReadIO(kal_uint16 port);

/*******************************************************************
** 函数名:    GPIO_WriteIO
** 函数描述:  gpio输出
** 输入参数:  data:  0 输出低电平   1输出高电平
              port: gpio管脚号码
** 输出参数:
** 返回:      
********************************************************************/
void GPIO_WriteIO(char data, kal_uint16 port);

/*******************************************************************
** 函数名:    GPIO_PullenSetup
** 函数描述:  使能上拉/下拉功能
** 输入参数:  pin: gpio管脚号码
              enable: 0关闭 1开启
** 输出参数:
** 返回:      
********************************************************************/
void GPIO_PullenSetup(kal_uint16 pin, kal_bool enable);

/*******************************************************************
** 函数名:    GPIO_PullSelSetup
** 函数描述:  配置上拉/下拉
** 输入参数:  pin: gpio管脚号码
              pull_up: 0下拉  1上拉
** 输出参数:
** 返回:      
********************************************************************/
void GPIO_PullSelSetup(kal_uint16 pin, kal_bool pull_up);

/*******************************************************************
** 函数名:    EINT_Set_Sensitivity
** 函数描述:  设置中断触发方式
** 输入参数:  eintno:  中断号
              sens: 0 电平触发  1 边沿触发
** 输出参数:
** 返回:      0:成功  1:失败
********************************************************************/
kal_uint32 EINT_Set_Sensitivity(kal_uint8 eintno, kal_bool sens);

/*******************************************************************
** 函数名:    EINT_Set_Polarity
** 函数描述:  设置中断极性
** 输入参数:  eintno:  中断号
              ACT_Polarity: 0 低电平中断  1 高电平中断
** 输出参数:
** 返回:      
********************************************************************/
void EINT_Set_Polarity(kal_uint8 eintno, kal_bool ACT_Polarity);

/*******************************************************************
** 函数名:    EINT_SW_Debounce_Modify
** 函数描述:  设置防反跳时间
** 输入参数:  eintno: 中断号
              debounce_time: 防反跳时间参数
** 输出参数:
** 返回:      
********************************************************************/
kal_int32 EINT_SW_Debounce_Modify(kal_uint8 eintno, kal_uint8 debounce_time);

/*******************************************************************
** 函数名:    EINT_Registration
** 函数描述:  配置中断
** 输入参数:  eintno:  中断号
              Dbounce_En: 防抖使能
              ACT_Polarity: 中断极性
              reg_hisr: 中断回调函数
              auto_umask: 回调之后是否自动使能中断
** 输出参数:
** 返回:      
********************************************************************/
void EINT_Registration(kal_uint8 eintno, kal_bool Dbounce_En, kal_bool ACT_Polarity, \
                       void (reg_hisr)(void), kal_bool auto_umask);

/*******************************************************************
** 函数名:    EINT_UnMask
** 函数描述:  使能中断
** 输入参数:  eintno:  中断号
** 输出参数:
** 返回:      
********************************************************************/                       
void EINT_UnMask(kal_uint8 eintno);

/*******************************************************************
** 函数名:    EINT_Mask
** 函数描述:  禁止中断
** 输入参数:  eintno:  中断号
** 输出参数:
** 返回:      
********************************************************************/
void EINT_Mask(kal_uint8 eintno);

/*******************************************************************
** 函数名:    EINT_Set_HW_Debounce
** 函数描述:  设置硬件消抖时间
** 输入参数:  eintno:  中断号
              ms: 硬件消抖时间，单位ms
** 输出参数:
** 返回:      
********************************************************************/
void EINT_Set_HW_Debounce(kal_uint8 eintno, kal_uint32 ms);

// MSG AT
/*******************************************************************
** 函数名:    dynamic_msgbased_at_send
** 函数描述:  通过消息模式发送AT指令
** 输入参数:  cmd:AT指令
              len:指令长度
              cb:结果回调
              user:需传递到回调的用户信息
** 输出参数:
** 返回:      
********************************************************************/
int dynamic_msgbased_at_send(char* cmd, kal_uint32 len, msgbased_at_cb cb, void* user);
/*******************************************************************
** 函数名:    dynamic_msgbased_at_reg_cb
** 函数描述:  所有消息AT结果回调注册，回调内容同dynamic_msgbased_at_send函数的回调，只需注册一次
** 输入参数:  cb:结果回调
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_msgbased_at_reg_cb(msgbased_at_cb fun); 


//audio
/*******************************************************************
** 函数名:    dynamic_audio_set_audio_mode
** 函数描述:  设置音频通道
** 输入参数:  mode:audio_mode_enum
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_audio_set_audio_mode(audio_mode_enum mode);
/*******************************************************************
** 函数名:    dynamic_audio_set_volume
** 函数描述:  设置音频音量大小
** 输入参数:  type:音频类型 volume_type_enum
              volume:音量大小 0~6
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_audio_set_volume(volume_type_enum type, kal_uint8 volume);
/*******************************************************************
** 函数名:     dynamic_record_cb_reg
** 函数描述:   录音回调注册
** 参数: 
** 返回:       
********************************************************************/
void dynamic_record_cb_reg(void* cb);
/*******************************************************************
** 函数名:     dynamic_record_recv_data
** 函数描述:   接收录音数据
** 参数: 
** 返回:       
********************************************************************/
void dynamic_record_recv_data(kal_uint8 *data,kal_uint32 len);
/*******************************************************************
** 函数名:     dynamic_record_start
** 函数描述:   开始录音
** 参数: 
** 返回:       
********************************************************************/
void dynamic_record_start(void);
/*******************************************************************
** 函数名:     dynamic_record_stop
** 函数描述:   停止录音
** 参数: 
** 返回:       
********************************************************************/
void dynamic_record_stop(void);

// GPS
/*******************************************************************
** 函数名:    dynamic_gps_recv_cb_reg
** 函数描述:  gps数据接收回调
** 输入参数:  cb:回调函数
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_gps_recv_cb_reg(DYNAMIC_GPS_CB* cb);

/*******************************************************************
** 函数名:    dynamic_gps_pow_crl
** 函数描述:  gps电源控制
** 输入参数:  onoff:0关闭  1打开
** 输出参数:
** 返回:      
********************************************************************/
void dynamic_gps_pow_crl(kal_uint8 onoff);

/*******************************************************************
** 函数名:    dynamic_gps_get_state
** 函数描述:  gps供电状态
** 输入参数:  
** 输出参数:
** 返回:      0:关闭  1:开启
********************************************************************/
kal_uint8 dynamic_gps_get_state(void);

/*******************************************************************
** 函数名:    dynamic_gps_uart_write
** 函数描述:  发送数据到GPS
** 输入参数:  buffer:要发送的数据的指针
              length:要发送数据的长度
** 输出参数:
** 返回:      已发送的长度
********************************************************************/
kal_uint16 dynamic_gps_uart_write(kal_uint8 *buffer, kal_uint16 length);
/*******************************************************************
** 函数名:     dynamic_gps_time_aid
** 函数描述:   时间辅助定位
** 参数:       
** 返回:       
********************************************************************/
kal_uint8 dynamic_gps_time_aid(applib_time_struct cur_time);
/*******************************************************************
** 函数名:     dynamic_gps_refloc_aid
** 函数描述:   参考位置辅助定位
** 参数:       
** 返回:       
********************************************************************/
kal_uint8 dynamic_gps_refloc_aid(double lat,double lng,double alt);
/*******************************************************************
** 函数名:     dynamic_gps_epo_req
** 函数描述:   EPO数据请求，数据不存在则会去下载
** 参数:       
** 返回:       
********************************************************************/
void dynamic_gps_epo_req(void);
/*******************************************************************
** 函数名:     dynamic_epo_is_valid
** 函数描述:  
** 参数:       
** 返回:       
********************************************************************/
kal_bool dynamic_epo_is_valid(void);
/*******************************************************************
** 函数名:     dynamic_gps_epo_aiding
** 函数描述:   EPO辅助定位
** 参数:       
** 返回:       
********************************************************************/
kal_bool dynamic_gps_epo_aiding(void);
/*******************************************************************
** 函数名:     dynamic_gps_get_gps_info
** 函数描述:   获取已解析的GPS数据
** 参数:       
** 返回:       
********************************************************************/
dynamic_gps_info_t *dynamic_gps_get_gps_info(void);

/*******************************************************************
** 函数名:     dynamic_gps_get_info_src
** 函数描述:   
** 参数:       
** 返回:       
********************************************************************/
nmea_data_t *dynamic_gps_get_info_src(void);

#endif
